//Colours
$color-primary : #55c57a;
$color-primary-light : #7ed56f;
$color-primary-dark : #28b485;

$color-secondary-light : #ffb900;
$color-secondary-dark : #ff7730;

$color-tertiary-light : #2998ff;
$color-tertiary-dark : #5643fa;

$color-grey-light-1 : #f7f7f7 ;
$color-grey-light-2 : #eee ;

$color-grey-dark : #777;
$color-grey-dark-2 : #999;


$color-white : #fff;
$color-black : #000;

$color-secondary-light : #ffb900;

//Font
$default-font-size : 1.6rem ;

//Grid
$grid-width : 114rem;
$gutter-vertical : 8rem; //Space btw row grids vertically
$gutter-horizontal : 6rem; //Space between grids horizontally

.header {

    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
         rgba(rgb(28, 29, 80) , 0.1) ,
          rgba(rgb(77, 153, 77), 0.3)
          ) , 
          url(../../img/developer.jpg);
    background-size: cover;
    background-position: top;
    position: relative;
    -webkit-clip-path: polygon( 0 0% , 100% 0 , 100% 75vh , 0 100%);
    clip-path: polygon( 0 0% , 100% 0 , 100% 75vh , 0 100%);

    &__logo-box {
   
        position: absolute;
        top: 4rem;
        left: 11rem;
        transition: all 1s;
        animation: App-logo-spin infinite 2s linear;

        // &:hover {
        //     transform: rotateY(360deg);
        // }
    }
    
    &__logo {
        height: 7rem;
        
    }
    
    
    &__text-box {
        position: absolute;
        top: 40%;
        left: 25%;
        transform: translate(-50% , -50%);
        font-size: 1.6rem;
        text-align: left;
    }

}


.heading-primary {

    /* 
        1. backface-visibility: hidden; ---> When animating any element then the parent/behind
        ... element can be hidden using this property
    */

    color: white;
    text-transform: uppercase;
    backface-visibility: hidden;
    margin-bottom: 6rem;


    &--main {
        /* 
        1. For creating animation write keyframes for 0% and 100% 
        2. Inside the class where u want to animate use the below properties
            animation-name: moveInLeft;
            animation-duration: 5s;
        3. animation-delay: 3s; ---> This delays for 3s and then starts animation
        4. animation-iteration-count: 3; ---> This animates the component 3 times
    } 
        */
        display: block;
        font-size: 3rem;
        font-weight: 400;
        text-transform: none;
    
        animation-name: moveInLeft;
        animation-duration: 1s;
        /* animation-delay: 3s; */
        /* animation-iteration-count: 3; */
        animation-timing-function: ease-out;
    }
    
    &--sub {
        display: block;
        font-size: 6rem;
        font-weight: 700;
        text-transform: none;
        color: yellow;
    
        animation: moveInTop 1s ease-out;
        transition: all 0.3s;

        &:hover {
            transform: scale(1.2) ;
            color: white;
        }
    }

    &--job-title {
        display: block;
        font-size: 3rem;
        font-weight: 700;
        text-transform: none;
        color: white;
    
        animation: moveInRight 1s ease-out;
        transition: all 0.3s;

        // &:hover {
        //     transform: scale(1.2) translateX(3rem);
        // }
    }

}

.heading-secondary {
    font-size: 3.5rem;
    text-transform: uppercase;
    font-weight: 700;
    display: inline-block; //This property helps us to stop the block where the text ends so this element 
                             //should not take 100% of its available width
                            //By default it is block element

    background-image: linear-gradient(to right , lightgreen , darkgreen);

    -webkit-background-clip : text; 
    
    background-clip : text; // This property will clip the background i.e the above linear gradient
                                    //It will clip exactly where the text sits
    
    color: transparent;
    letter-spacing: 2px;
    transition: all 0.2s;

    &:hover {
        transform: skewY(2deg) skewX(15deg) scale(1.1);
        text-shadow: .5rem 1rem 2rem rgba(black , 0.5); 
        //0.5rem is x direction , 1 rem is y direction , 2rem is blur
        // rgba 0.2 is 20% opacity
    }
}

.heading-tertiary {
    font-size: 1.6rem;
    font-weight: 700;
    text-transform: uppercase;
}

.paragraph {
    font-size: 1.6rem;
    &:not(:last-child) {
        margin-bottom: 3rem;
    }
}

/* Animations start  */
@keyframes moveInLeft {

    /* 
    1. transform : rotate(120deg) ----> This tranforms the element to rotate 
    */

    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0)
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem)
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0)
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem)
    }

    100% {
        opacity: 1;
        transform: translate(0)
    }
}

@keyframes moveInTop {
    0% {
        opacity: 0;
        transform: translateY(-30rem) rotateY(360deg);
        
    }

    100% {
        opacity: 1;
        transform: translate(0);
        color: yellow;
    }
}

@keyframes App-logo-spin {
    from {
      transform: rotateY(0deg);
    }
    to {
      transform: rotateY(360deg);
    }
  }


.btn {
    &:link ,
    &:visited {
        /* 
        1. :link ----> This is used to style elements under special conditions . Link is special state of the selector 
        2. :visited ----> This is state where user has already clicked the button 
        3. padding ---> single value will apply all around it . If there are 2 values then 1st one is top and bottom 
            .... and 2nd one is left and right
            If there are 4 values then it is top , right , bottom , left
        4. display: inline-block; ---> Tells to inline element to behave as normal block element .. This is used to give height,width
            .... and paddings to elements
        */
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        border-radius: 10rem;
        transition: all 0.2s;
        position: relative;
        font-size: $default-font-size;
    }
    
    &:hover {
        /* 
        1. transform is important property
        2. translateY moves from top to down so it is negative in top and positive in bottom
        3. translateX moves from left to right . it is negative from left to postive towards right
        4. box-shadow:  0 10px 20px; ---> 0 is x direction of shadow , 10px is y direction of shadow , 20px is blur value
        5. rgba(0, 0 , 0 , 0.2); ---> 0 0 0 is black values and 0.2 is transparency value
        */
        transform: translateY(-.3rem);
        box-shadow:  0 1rem 2rem rgba($color-black, 0.2);

        &::after {
            transform: scaleX(1.4) scaleY(1.6);
            opacity: 0;
        }
    }
    
    &:active {
        /* 
        1. When we clicked the button then it is in active state
        2. This -1px is in realtion with .btn-link state / initial link state
        */
        transform: translateY(-1px);
        box-shadow:  0 0.5rem 1rem rgba($color-black, 0.2);
    }
    
    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }

    &--green {
        background-color: $color-primary;
        color: $color-white;

        &::after {
            background-color: $color-primary;
        }
    }
    
    &::after {
        /* 
        1. This after pseudo element acts as a child to the original parent element
        2. z-index: -1; ---> Specifies the position of the element on one above the other
        */
        content: "";
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all 0.4s;
    }
    

    &--animated {
        /* 
            1. animation: moveInBottom 0.5s ease-out 0.75s;
                moveInBottom is keyframe animation name
                0.5s is the animation time
                ease-out is the way 
                0.75s is the delay t ostart the animation
    
            2. animation-fill-mode: backwards;
                What this does is automatically apply the styles of 0% before the animation starts
        */
        animation: moveInBottom 0.5s ease-out 0.75s;
        animation-fill-mode: backwards;
    }
}

.btn-text {
    &:link,
    &:visited {
        font-size:$default-font-size;
        color: $color-primary;
        display: inline-block; //We can use boxmodel properties such as padding , margin etc
        text-decoration: none;
        border-bottom: 1px solid $color-primary;
        padding: 3px;
        transition: all 0.2s;
    }

    &:hover {
        background-color: $color-primary;
        color: white;
        box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
        transform: translateY(-2px);
    }

    &:active {
        box-shadow: 0 0.5rem 1rem rgba($color-black, 0.15);
        transform: translateY(0);
    }
}

