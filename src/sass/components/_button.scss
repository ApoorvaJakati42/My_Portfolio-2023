.btn {
    &,
    &:link ,
    &:visited {
        /* 
        1. :link ----> This is used to style elements under special conditions . Link is special state of the selector 
        2. :visited ----> This is state where user has already clicked the button 
        3. padding ---> single value will apply all around it . If there are 2 values then 1st one is top and bottom 
            .... and 2nd one is left and right
            If there are 4 values then it is top , right , bottom , left
        4. display: inline-block; ---> Tells to inline element to behave as normal block element .. This is used to give height,width
            .... and paddings to elements
        */
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        border-radius: 10rem;
        transition: all 0.2s;
        position: relative;
        font-size: $default-font-size;

        //Change for the <button> element
        border: none;
        cursor: pointer;
    }
    
    &:hover {
        /* 
        1. transform is important property
        2. translateY moves from top to down so it is negative in top and positive in bottom
        3. translateX moves from left to right . it is negative from left to postive towards right
        4. box-shadow:  0 10px 20px; ---> 0 is x direction of shadow , 10px is y direction of shadow , 20px is blur value
        5. rgba(0, 0 , 0 , 0.2); ---> 0 0 0 is black values and 0.2 is transparency value
        */
        transform: translateY(-.3rem);
        box-shadow:  0 1rem 2rem rgba($color-black, 0.2);

        &::after {
            transform: scaleX(1.4) scaleY(1.6);
            opacity: 0;
        }
    }
    
    &:active ,
    &:focus {
        /* 
        1. When we clicked the button then it is in active state
        2. This -1px is in realtion with .btn-link state / initial link state
        */
        outline: none;
        transform: translateY(-1px);
        box-shadow:  0 0.5rem 1rem rgba($color-black, 0.2);
    }
    
    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }

    &--green {
        background-color: $color-primary;
        color: $color-white;

        &::after {
            background-color: $color-primary;
        }
    }
    
    &::after {
        /* 
        1. This after pseudo element acts as a child to the original parent element
        2. z-index: -1; ---> Specifies the position of the element on one above the other
        */
        content: "";
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all 0.4s;
    }
    

    &--animated {
        /* 
            1. animation: moveInBottom 0.5s ease-out 0.75s;
                moveInBottom is keyframe animation name
                0.5s is the animation time
                ease-out is the way 
                0.75s is the delay t ostart the animation
    
            2. animation-fill-mode: backwards;
                What this does is automatically apply the styles of 0% before the animation starts
        */
        animation: moveInBottom 0.5s ease-out 0.75s;
        animation-fill-mode: backwards;
    }
}

.btn-text {
    &:link,
    &:visited {
        font-size:$default-font-size;
        color: $color-primary;
        display: inline-block; //We can use boxmodel properties such as padding , margin etc
        text-decoration: none;
        border-bottom: 1px solid $color-primary;
        padding: 3px;
        transition: all 0.2s;
    }

    &:hover {
        background-color: $color-primary;
        color: white;
        box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
        transform: translateY(-2px);
    }

    &:active {
        box-shadow: 0 0.5rem 1rem rgba($color-black, 0.15);
        transform: translateY(0);
    }
}



.btn-hero {
    &:link ,
    &:visited {
        /* 
        1. :link ----> This is used to style elements under special conditions . Link is special state of the selector 
        2. :visited ----> This is state where user has already clicked the button 
        3. padding ---> single value will apply all around it . If there are 2 values then 1st one is top and bottom 
            .... and 2nd one is left and right
            If there are 4 values then it is top , right , bottom , left
        4. display: inline-block; ---> Tells to inline element to behave as normal block element .. This is used to give height,width
            .... and paddings to elements
        */
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        border-radius: 10rem;
        transition: all 0.2s;
        position: relative;
        font-size: $default-font-size;

        // @include respond(tabLand) {
        //     font-size: 2rem;
        //     margin-left: 5rem;
        // }

        
        @include respond(tabLand) {
            font-size: 1.25rem;
            margin-left: 4rem;
        }

        @include respond(tabPort) {
            font-size: 1.25rem;
            margin-left: 5rem;
        }

        @include respond(phone) {
            font-size: 1.25rem;
            margin-left: -7rem;
            margin-bottom: -2rem;
            padding: 1rem 2rem;
            left : 0;
        }
    }
    
    &:hover {
        /* 
        1. transform is important property
        2. translateY moves from top to down so it is negative in top and positive in bottom
        3. translateX moves from left to right . it is negative from left to postive towards right
        4. box-shadow:  0 10px 20px; ---> 0 is x direction of shadow , 10px is y direction of shadow , 20px is blur value
        5. rgba(0, 0 , 0 , 0.2); ---> 0 0 0 is black values and 0.2 is transparency value
        */
        transform: translateY(-.3rem);
        box-shadow:  0 1rem 2rem rgba($color-black, 0.2);

        &::after {
            transform: scaleX(1.4) scaleY(1.6);
            opacity: 0;
        }
    }
    
    &:active {
        /* 
        1. When we clicked the button then it is in active state
        2. This -1px is in realtion with .btn-link state / initial link state
        */
        transform: translateY(-1px);
        box-shadow:  0 0.5rem 1rem rgba($color-black, 0.2);
    }
    
    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }

    &--green {
        background-color: $color-primary;
        color: $color-white;

        &::after {
            background-color: $color-primary;
        }
    }
    
    &::after {
        /* 
        1. This after pseudo element acts as a child to the original parent element
        2. z-index: -1; ---> Specifies the position of the element on one above the other
        */
        content: "";
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all 0.4s;
    }
    

    &--animated {
        /* 
            1. animation: moveInBottom 0.5s ease-out 0.75s;
                moveInBottom is keyframe animation name
                0.5s is the animation time
                ease-out is the way 
                0.75s is the delay t ostart the animation
    
            2. animation-fill-mode: backwards;
                What this does is automatically apply the styles of 0% before the animation starts
        */
        animation: moveInBottom 0.5s ease-out 0.75s;
        animation-fill-mode: backwards;
    }
}

.btn-text-hero {
    &:link,
    &:visited {
        font-size:$default-font-size;
        color: $color-primary;
        display: inline-block; //We can use boxmodel properties such as padding , margin etc
        text-decoration: none;
        border-bottom: 1px solid $color-primary;
        padding: 3px;
        transition: all 0.2s;
    }

    &:hover {
        background-color: $color-primary;
        color: white;
        box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
        transform: translateY(-2px);
    }

    &:active {
        box-shadow: 0 0.5rem 1rem rgba($color-black, 0.15);
        transform: translateY(0);
    }
}